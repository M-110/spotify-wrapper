---
# 1. AlbumObject
# 
- name: Album
  doc: "Album Object Doc String."
  str_return: name
  repr_return:
    - name
    - id
    - artists
  attrs:
    - name: album_type
      doc: "The type of the album: album, single, or compilation."
      return: str
      
    - name: artists
      doc: "The artists of the album. Each artist object includes a link in href to more detailed information about the artist."
      return: List[SimplifiedArtistObject]
      
    - name: available_markets
      doc: "The markets in which the album is available: ISO 3166-1 alpha-2 country codes. Note that an album is considered available in a market when at least 1 of its tracks is available in that market."
      return: List[str]
      
    - name: copyrights
      doc: "The copyright statements of the album."
      return: List[CopyrightObject]
      
    - name: external_ids
      doc: "Known external IDs for the album."
      return: ExternalIdObject
      
    - name: external_urls
      doc: "Known external URLs for this album."
      return: ExternalUrlObject
      
    - name: genres
      doc: 'A list of the genres used to classify the album. For example: “Prog Rock” , “Post-Grunge”. (If not yet classified, the array is empty.)'
      return: List[str]     
      
    - name: href
      doc: "A link to the Web API endpoint providing full details of the album."
      return: str
      
    - name: id
      doc: "The Spotify ID for the album."
      return: str
      
    - name: images
      doc: "The cover art for the album in various sizes, widest first."
      return: List[ImageObject]
      
    - name: label
      doc: "The label for the album."
      return: str
      
    - name: name
      doc: "The name of the album. In case of an album takedown, the value may be an empty string."
      return: str    
      
    - name: popularity
      doc: "The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated from the popularity of the album’s individual tracks."
      return: int
      
    - name: release_date
      doc: "The date the album was first released, for example “1981-12-15”. Depending on the precision, it might be shown as “1981” or “1981-12”."
      return: str      
      
    - name: release_date_precision
      doc: 'The precision with which release_date value is known: “year”, “month”, or “day”.'
      return: str
      
    - name: restrictions
      doc: "Included in the response when a content restriction is applied. See Restriction Object for more details."
      return: Optional[AlbumRestrictionObject]   
      
    - name: tracks
      doc: "The tracks of the album."
      return: PagingObject[SimplifiedTrackObject]
      
    - name: type
      doc: 'The object type: “album”.'
      return: str      
      
    - name: uri
      doc: "The Spotify URI for the album."
      return: str

# 2. AlbumRestrictionObject
# TODO: What does this look like??
- name: AlbumRestriction
  doc: "Album Restriction Object docstring..."
  repr_return: 
    - reason
  attrs:
    - name: reason
      doc: "The reason for the restriction. Supported values:
               \n    market - The content item is not available in the given market.
               \n    product - The content item is not available for the user’s subscription type.
               \n    explicit - The content item is explicit and the user’s account is set to not play explicit content.
            \n\nAdditional reasons may be added in the future."
      return: str
      
      
# 3. ArtistObject
# 
- name: Artist
  doc: "Artist docstring"
  str_return: name
  repr_return:
    - name
  attrs:
    - name: external_urls
      doc: "Known external URLs for this artist."
      return: ExternalUrlObject
      
    - name: followers
      doc: "Information about the followers of the artist."
      return: FollowersObject
      
    - name: genres
      doc: 'A list of the genres the artist is associated with. For example: "Prog Rock" , "Post-Grunge". (If not yet classified, the array is empty.)'
      return: List[str]
      
    - name: href
      doc: "A link to the Web API endpoint providing full details of the artist."
      return: str
      
    - name: id
      doc: "The Spotify ID for the artist."
      return: str
      
    - name: images
      doc: "Images of the artist in various sizes, widest first."
      return: List[ImageObject]
      
    - name: name
      doc: "The name of the artist."
      return: str     
      
    - name: popularity
      doc: "The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist’s popularity is calculated from the popularity of all the artist’s tracks."
      return: int
      
    - name: type
      doc: 'The object type: "artist"'
      return: str
      
    - name: uri
      doc: "The Spotify URI for the artist."
      return: List[ImageObject]
      
      
# 4. AudioFeaturesObject
# 
- name: AudioFeatures
  doc: "AudioFeatures docstring.."
  repr_return:
    - id
  attrs:
    - name: acousticness
      doc: "A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic."
      return: float
      
    - name: analysis_url
      doc: "An HTTP URL to access the full audio analysis of this track. An access token is required to access this data."
      return: str
      
    - name: danceability
      doc: "Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable."
      return: float
      
    - name: duration_ms
      doc: "The duration of the track in milliseconds."
      return: int
      
    - name: energy
      doc: "Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy."
      return: float
      
    - name: id
      doc: "The Spotify ID for the track."
      return: str
      
    - name: instrumentalness
      doc: 'Predicts whether a track contains no vocals. “Ooh” and “aah” sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly “vocal”. The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.)'
      return: int    
      
    - name: key
      doc: "The key the track is in. Integers map to pitches using standard Pitch Class notation . E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on."
      return: int

    - name: liveness
      doc: "Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live."
      return: float

    - name: loudness
      doc: "The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typical range between -60 and 0 db."
      return: float
      
    - name: mode
      doc: "Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0."
      return: int

    - name: speechiness
      doc: "Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks."
      return: float
      
    - name: tempo
      doc: 'The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.'
      return: float    
      
    - name: time_signature
      doc: "An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure)."
      return: int
      
    - name: track_href
      doc: "A link to the Web API endpoint providing full details of the track."
      return: str
      
    - name: type
      doc: 'The object type: “audio_features”'
      return: str
      
    - name: uri
      doc: "The Spotify URI for the track."
      return: str

    - name: valence
      doc: "A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry)."
      return: float

# 5. CategoryObject
# 
- name: Category
  doc: "CategoryObject doc string...."
  str_return: name
  repr_return:
    - name
  attrs:
    - name: href
      doc: "A link to the Web API endpoint returning full details of the category."
      return: str
      
    - name: icons
      doc: "The category icon, in various sizes."
      return: List[ImageObject]
      
    - name: id
      doc: "The Spotify category ID of the category."
      return: str
      
    - name: name
      doc: "The name of the category."
      return: str

# 6. ContextObject
# 
- name: Context
  doc: "ContextObject doc string...."
  repr_return:
    - type
  attrs:
    - name: external_urls
      doc: "External URLs for this context."
      return: ExternalUrlObject
      
    - name: href
      doc: "A link to the Web API endpoint providing full details of the track."
      return: str

    - name: type
      doc: 'The object type, e.g. “artist”, “playlist”, “album”, “show”.'
      return: str
      
    - name: uri
      doc: "The Spotify URI for the context."
      return: str
        
        
# 7. CopyrightObject
# 
- name: Copyright
  doc: "Copyright doc string...."
  str_return: text
  repr_return:
    - text
    - type
  attrs:
    - name: text
      doc: "The copyright text for this content."
      return: str
      
    - name: type
      doc: "The type of copyright: C = the copyright, P = the sound recording (performance) copyright."
      return: str
      
        

# 8. CurrentlyPlayingContextObject
# 
- name: CurrentlyPlayingContext
  doc: "CurrentlyPlayingContext doc string...."
  repr_return:
    - device
    - repeat_state
    - shuffle_state
  attrs:
    - name: actions
      doc: "Allows to update the user interface based on which playback actions are available within the current context."
      return: DisallowsObject
      
    - name: context
      doc: "A Context Object. Can be None."
      return: Optional[ContextObject]
      
    - name: currently_playing_type
      doc: "The object type of the currently playing item. Can be one of track, episode, ad or unknown."
      return: str
      
    - name: device
      doc: "The device that is currently active."
      return: DeviceObject

    - name: is_playing
      doc: "If something is currently playing, return True."
      return: bool
      
    - name: item
      doc: "The currently playing track or episode. Can be None."
      return: Union[TrackObject, EpisodeObject, None]    
      
    - name: progress_ms
      doc: "Progress into the currently playing track or episode. Can be null."
      return: Optional[int]
      
    - name: repeat_state
      doc: "off, track, context"
      return: str
      
    - name: shuffle_state
      doc: "If shuffle is on or off."
      return: str
      
    - name: timestamp
      doc: "Unix Millisecond Timestamp when data was fetched."
      return: int 
      

# 9. CurrentlyPlayingObject
# 
- name: CurrentlyPlaying
  doc: "CurrentlyPlaying doc string...."
  repr_return:
    - item
  attrs:
    - name: context
      doc: "A Context Object. Can be None."
      return: Optional[ContextObject]
      
    - name: currently_playing_type
      doc: "The object type of the currently playing item. Can be one of track, episode, ad or unknown."
      return: str

    - name: is_playing
      doc: "If something is currently playing, return True."
      return: bool
      
    - name: item
      doc: "The currently playing track or episode. Can be None."
      return: Union[TrackObject, EpisodeObject, None]    
      
    - name: progress_ms
      doc: "Progress into the currently playing track or episode. Can be null."
      return: Optional[int]
      
    - name: timestamp
      doc: "Unix Millisecond Timestamp when data was fetched."
      return: int 
      
      

# 10. CursorObject
# 
- name: Cursor
  doc: "CursorObject doc string.."
  repr_return: 
    - after
  attrs:
    - name: after
      doc: "The cursor to use as key to find the next page of items."
      return: str
      

# 11. CursorPagingObject
# 
- name: CursorPaging
  doc: "CursorPagingObject doc string..."
  repr_return: 
    - items
    - limit
    - next
  attrs:
    - name: cursors
      doc: "The cursors used to find the next set of items."
      return: CursorObject
      
    - name: href
      doc: "A link to the Web API endpoint returning the full result of the request."
      return: str

    - name: items
      doc: "The requested data."
      return: List[SpotifyObject]
      
    - name: limit
      doc: "The maximum number of items in the response (as set in the query or by default)."
      return: int   
      
    - name: next
      doc: "URL to the next page of items. (Returns None if this is the last page)"
      return: Optional[str]
      
    - name: total
      doc: "Unix Millisecond Timestamp when data was fetched."
      return: int 
      

# 12. DeviceObject
# 
- name: Device
  doc: "DeviceObject doc string..."
  str_return: name
  repr_return:
    - name
    - id
    - type
  attrs:
    - name: id
      doc: "The device ID. This may be None."
      return: Optional[str]
      
    - name: is_active
      doc: "If this device is the currently active device."
      return: bool

    - name: is_private_session
      doc: "If this device is currently in a private session."
      return: bool
      
    - name: is_restricted
      doc: 'Whether controlling this device is restricted. At present if this is True then no Web API commands will be accepted by this device.'
      return: bool
      
    - name: name
      doc: "The name of the device."
      return: str
      
    - name: type
      doc: 'Device type, such as “computer”, “smartphone” or “speaker”.'
      return: str
      
    - name: volume_percent
      doc: "The current volume in percent. This may be None."
      return: Optional[int]
        
# 13. DevicesObject
# 
- name: Devices
  doc: "DevicesObject doc string..."
  repr_return: 
    - devices
  attrs:
    - name: devices
      doc: "A list of 0..n Device objects"
      return: List[DeviceObject]

# 14. DisallowsObject
# 
- name: Disallows
  doc: "DisallowsObject doc string..."
  repr_return: 
    - interrupting_playback
    - pausing
    - resuming
    - seeking
    - skipping_next
    - skipping_prev
    - toggling_repeat_context
    - toggling_repeat_track
    - toggling_shuffle
    - transferring_playback
  attrs:
    - name: interrupting_playback
      doc: "Interrupting playback. Optional field."
      return: Optional[bool]
      
    - name: pausing
      doc: "Pausing. Optional field."
      return: Optional[bool]
      
    - name: resuming
      doc: "Resuming. Optional field."
      return: Optional[bool]

    - name: seeking
      doc: "Seeking playback location. Optional field."
      return: Optional[bool]
      
    - name: skipping_next
      doc: 'Skipping to the next context. Optional field.'
      return: Optional[bool]
      
    - name: skipping_prev
      doc: "Skipping to the previous context. Optional field."
      return: Optional[bool]
      
    - name: toggling_repeat_context
      doc: 'Toggling repeat context flag. Optional field.'
      return: Optional[bool]
      
    - name: toggling_repeat_track
      doc: "Toggling repeat track flag. Optional field."
      return: Optional[bool]
      
    - name: toggling_shuffle
      doc: 'Toggling shuffle flag. Optional field.'
      return: Optional[bool]
      
    - name: transferring_playback
      doc: "Transferring playback between devices. Optional field."
      return: Optional[bool]


# 15. EpisodeObject
# 
- name: Episode
  doc: "EpisodeObject doc string..."
  str_return: name
  repr_return:
    - name
    - show
    - id
  attrs:
    - name: audio_preview_url
      doc: "A URL to a 30 second preview (MP3 format) of the episode. None if not available."
      return: Optional[str]
      
    - name: description
      doc: "A description of the episode."
      return: str
      
    - name: duration_ms
      doc: "The episode length in milliseconds."
      return: int

    - name: explicit
      doc: "Whether or not the episode has explicit content (True = yes it does; False = no it does not OR unknown)."
      return: bool
      
    - name: external_urls
      doc: 'External URLs for this episode.'
      return: ExternalUrlObject
      
    - name: href
      doc: "A link to the Web API endpoint providing full details of the episode."
      return: str
      
    - name: id
      doc: 'The Spotify ID for the episode.'
      return: str
      
    - name: images
      doc: "The cover art for the episode in various sizes, widest first."
      return: List[ImageObject]
      
    - name: is_externally_hosted
      doc: 'True if the episode is hosted outside of Spotify’s CDN.'
      return: bool
      
    - name: is_playable
      doc: "True if the episode is playable in the given market. Otherwise False."
      return: bool
      
    - name: languages
      doc: "A list of the languages used in the episode, identified by their ISO 639 code."
      return: List[str]
      
    - name: name
      doc: "The name of the episode."
      return: str

    - name: release_date
      doc: 'The date the episode was first released, for example "1981-12-15". Depending on the precision, it might be shown as "1981" or "1981-12".'
      return: str
      
    - name: release_date_precision
      doc: 'The precision with which release_date value is known: "year", "month", or "day".'
      return: str
      
    - name: resume_point
      doc: "The user’s most recent position in the episode. Set if the supplied access token is a user token and has the scope user-read-playback-position."
      return: Optional[ResumePointObject]
      
    - name: show
      doc: 'The show on which the episode belongs.'
      return: SimplifiedShowObject
      
    - name: type
      doc: 'The object type: “episode”.'
      return: str
      
    - name: uri
      doc: 'The Spotify URI for the episode.'
      return: str
        
# 16. ErrorObject
# 
- name: Error
  doc: "ErrorObject doc string..."
  str_return: message
  repr_return:
    - message
    - status
  attrs:
    - name: message
      doc: "A short description of the cause of the error."
      return: str

    - name: status
      doc: "The HTTP status code."
      return: int
      
        
        
# 17. ExplicitContentSettingsObject
# 
- name: ExplicitContentSettings
  doc: "ExplicitContentSettings doc string..."
  repr_return:
    - filter_enabled
    - filter_locked
  attrs:
    - name: filter_enabled
      doc: "When True, indicates that explicit content should not be played."
      return: bool

    - name: filter_locked
      doc: "When True, indicates that the explicit content setting is locked and can’t be changed by the user."
      return: bool
      
      
        
        
# 18. ExternalIdObject
# 
- name: ExternalId
  doc: "ExternalIdObject doc string..."
  repr_return:
    - ean
    - isrc
    - upc
  attrs:
    - name: ean
      doc: "International Article Number."
      return: str

    - name: isrc
      doc: "International Standard Recording Code."
      return: str
      
    - name: upc
      doc: "Universal Product Code."
      return: str
       
       
       
# 19. ExternalUrlObject
# 
- name: ExternalUrl
  doc: "ExternalUrlObject doc string..."
  str_return: spotify
  repr_return:
    - spotify
  attrs:
    - name: spotify
      doc: "The Spotify URL for the object."
      return: str
      
      
# 20. FollowersObject
# TODO: The "href" key is currently not implemented by Spotify in the Web API, but could be in the future.
- name: Followers
  doc: "FollowersObject doc string..."
  str_return: total
  repr_return:
    - total
  attrs:
    - name: total
      doc: "The total number of followers."
      return: int
     
# 21. ImageObject
#
- name: Image
  doc: "ImageObject doc string..."
  str_return: url
  repr_return:
    - url
    - height
    - width
  attrs:
    - name: height
      doc: "The image height in pixels. If unknown: None."
      return: Optional[int]
      
    - name: url
      doc: "The source URL of the image."
      return: str
      
    - name: width
      doc: "The image width in pixels. If unknown: None."
      return: Optional[int]
      
     
     
# 22. LinkedTrackObject
#
- name: LinkedTrack
  doc: "LinkedTrackObject doc string..."
  str_return: uri
  repr_return:
    - id
    - uri
  attrs:
    - name: external_urls
      doc: "Known external URLs for this track."
      return: ExternalUrlObject
      
    - name: href
      doc: "A link to the Web API endpoint providing full details of the track."
      return: str
      
    - name: id
      doc: "The Spotify ID for the track."
      return: str
      
    - name: type
      doc: 'The object type: “track”.'
      return: str
      
    - name: uri
      doc: "The Spotify URI for the track."
      return: str
      
## 23. PagingObject
## TODO: Make href a custom object?
#- name: Paging
#  doc: "PagingObject doc string..."
#  attrs:
#    - name: href
#      doc: "A link to the Web API endpoint returning the full result of the request."
#      return: str
#      
#    - name: items
#      doc: "The requested data."
#      return: List[SpotifyObject]
#
#    - name: limit
#      doc: "The maximum number of items in the response (as set in the query or by default)."
#      return: int
#      
#    - name: next
#      doc: 'URL to the next page of items. None if this is the last page.'
#      return: Optional[str]
#      
#    - name: offset
#      doc: "The offset of the items returned (as set in the query or by default)."
#      return: int
#
#    - name: previous
#      doc: 'URL to the previous page of items. None if this is the first page.'
#      return: Optional[str]
#      
#    - name: total
#      doc: "The total number of items available to return."
#      return: int
      
# 24. PlayHistoryObject
#
- name: PlayHistory
  doc: "PlayHistoryObject doc string..."
  str_return: track
  repr_return:
    - track
    - played_at
  attrs:
    - name: context
      doc: "The context the track was played from."
      return: ContextObject
      
    - name: played_at
      doc: "The date and time the track was played."
      return: datetime

    - name: track
      doc: "The track the user listened to."
      return: SimplifiedTrackObject
      
# 25. PlayErrorObject
#
- name: PlayError
  doc: "PlayErrorObject doc string..."
  str_return: message
  repr_return:
    - message
    - reason
    - status
  attrs:
    - name: message
      doc: "A short description of the cause of the error."
      return: str
      
    - name: reason
      doc: "NO_PREV_TRACK - The command requires a previous track, but there is none in the context.
            \nNO_NEXT_TRACK - The command requires a next track, but there is none in the context.
            \nNO_SPECIFIC_TRACK - The requested track does not exist.
            \nALREADY_PAUSED - The command requires playback to not be paused.
            \nNOT_PAUSED - The command requires playback to be paused.
            \nNOT_PLAYING_LOCALLY - The command requires playback on the local device.
            \nNOT_PLAYING_TRACK - The command requires that a track is currently playing.
            \nNOT_PLAYING_CONTEXT - The command requires that a context is currently playing.
            \nENDLESS_CONTEXT - The shuffle command cannot be applied on an endless context.
            \nCONTEXT_DISALLOW - The command could not be performed on the context.
            \nALREADY_PLAYING - The track should not be restarted if the same track and context is already playing, and there is a resume point.
            \nRATE_LIMITED - The user is rate limited due to too frequent track play, also known as cat-on-the-keyboard spamming.
            \nREMOTE_CONTROL_DISALLOW - The context cannot be remote-controlled.
            \nDEVICE_NOT_CONTROLLABLE - Not possible to remote control the device.
            \nVOLUME_CONTROL_DISALLOW - Not possible to remote control the device’s volume.
            \nNO_ACTIVE_DEVICE - Requires an active device and the user has none.
            \nPREMIUM_REQUIRED - The request is prohibited for non-premium users.
            \nUNKNOWN - Certain actions are restricted because of unknown reasons."
      return: str

    - name: status
      doc: "The HTTP status code. Either 404 NOT FOUND or 403 FORBIDDEN."
      return: int
      
      
# 26. PlaylistObject
#
- name: Playlist
  doc: "PlayListObject doc string..."
  str_return: name
  repr_return:
    - name
    - id
    - tracks
  attrs:
    - name: collaborative
      doc: "True if the owner allows other users to modify the playlist"
      return: bool
      
    - name: description
      doc: "The playlist description. Only returned for modified, verified playlists, otherwise None."
      return: Optional[str]

    - name: external_urls
      doc: "Known external URLs for this playlist."
      return: ExternalUrlObject

    - name: followers
      doc: "Information about the followers of the playlist."
      return: FollowersObject
      
    - name: href
      doc: "A link to the Web API endpoint providing full details of the playlist."
      return: str

    - name: id
      doc: "The Spotify ID for the playlist."
      return: str

    - name: images
      doc: "Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. Note: If returned, the source URL for the image (url) is temporary and will expire in less than a day."
      return: List[ImageObject]
      
    - name: name
      doc: "The name of the playlist."
      return: str

    - name: owner
      doc: "The user who owns the playlist"
      return: PublicUserObject

    - name: public
      doc: "The playlist’s public/private status: True the playlist is public, False the playlist is private, None the playlist status is not relevant."
      return: Optional[bool]
      
    - name: snapshot_id
      doc: "The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version."
      return: str

    - name: tracks
      doc: "Information about the tracks of the playlist. Note, a track object may be None. This can happen if a track is no longer available."
      return: List[Optional[PlaylistTrackObject]]
      
    - name: type
      doc: 'The object type: “playlist”.'
      return: str

    - name: uri
      doc: "The Spotify URI for the playlist."
      return: str

# 27. PlaylistTrackObject
#
- name: PlaylistTrack
  doc: "PlayListTrackObject doc string..."
  str_return: track
  repr_return:
    - track
  attrs:
    - name: added_at
      doc: "The date and time the track or episode was added. Note that some very old playlists may return None in this field."
      return: Optional[datetime]
      
    - name: added_by
      doc: "The Spotify user who added the track or episode. Note that some very old playlists may return None in this field."
      return: Optional[PublicUserObject]

    - name: is_local
      doc: "Whether this track or episode is a local file or not."
      return: bool

    - name: track
      doc: "Information about the track or episode."
      return: Union[TrackObject, EpisodeObject]
      
      
      
# 28. PlaylistTracksRefObject
#
- name: PlaylistTracksRef
  doc: "PlaylistTracksRefObject doc string..."
  str_return: href
  repr_return:
    - href
  attrs:
    - name: href
      doc: "A link to the Web API endpoint where full details of the playlist’s tracks can be retrieved."
      return: str
      
    - name: total
      doc: "Number of tracks in the playlist."
      return: int

# 29. PrivateUserObject
#
- name: PrivateUser
  doc: "PrivateUserObject doc string..."
  str_return: display_name
  repr_return:
    - display_name
    - email
    - id
  attrs:
    - name: country
      doc: "The country of the user, as set in the user’s account profile. An ISO 3166-1 alpha-2 country code. This field is only available when the current user has granted access to the user-read-private scope."
      return: str
      
    - name: display_name
      doc: "The name displayed on the user’s profile. None if not available."
      return: Optional[str]

    - name: email
      doc: "The user’s email address, as entered by the user when creating their account. Important! This email address is unverified; there is no proof that it actually belongs to the user. This field is only available when the current user has granted access to the user-read-email scope."
      return: Optional[str]

    - name: explicit_content
      doc: "The user’s explicit content settings. This field is only available when the current user has granted access to the user-read-private scope."
      return: Optional[ExplicitContentSettingsObject]
      
    - name: external_urls
      doc: "Known external URLs for this user."
      return: ExternalUrlObject

    - name: followers
      doc: "Information about the followers of the user."
      return: FollowersObject

    - name: href
      doc: "A link to the Web API endpoint for this user."
      return: str
      
    - name: id
      doc: "The Spotify user ID for the user."
      return: str
      
    - name: images
      doc: "The user’s profile image."
      return: List[ImageObject]
      
    - name: product
      doc: 'The user’s Spotify subscription level: “premium”, “free”, etc. (The subscription level “open” can be considered the same as “free”.) This field is only available when the current user has granted access to the user-read-private scope.'
      return: Optional[str]
      
    - name: type
      doc: 'The object type: “user”.'
      return: str

    - name: uri
      doc: "The Spotify URI for the user."
      return: str

      
      

# 30. PublicUserObject
#
- name: PublicUser
  doc: "PublicUserObject doc string..."
  str_return: display_name
  repr_return:
    - display_name
    - id
  attrs:
    - name: display_name
      doc: "The name displayed on the user’s profile. None if not available."
      return: Optional[str]
      
    - name: external_urls
      doc: "Known external URLs for this user."
      return: ExternalUrlObject

    - name: followers
      doc: "Information about the followers of this user."
      return: FollowersObject

    - name: href
      doc: "A link to the Web API endpoint for this user."
      return: str
      
    - name: id
      doc: "The Spotify user ID for this user."
      return: str
      
    - name: images
      doc: "The user’s profile image."
      return: List[ImageObject]
      
    - name: product
      doc: 'The user’s Spotify subscription level: “premium”, “free”, etc. (The subscription level “open” can be considered the same as “free”.) This field is only available when the current user has granted access to the user-read-private scope.'
      return: Optional[str]
      
    - name: type
      doc: 'The object type: “user”.'
      return: str

    - name: uri
      doc: "The Spotify URI for the user."
      return: str
      

# 31. RecommendationSeedObject
#
- name: RecommendationSeed
  doc: "RecommendationSeedObject doc string..."
  repr_return:
    - type
  attrs:
    - name: after_filtering_size
      doc: "The number of tracks available after min_* and max_* filters have been applied."
      return: int
      
    - name: after_relinking_size
      doc: "The number of tracks available after relinking for regional availability."
      return: int

    - name: href
      doc: "A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be None."
      return: str
      
    - name: id
      doc: "The id used to select this seed. This will be the same as the string used in the seed_artists, seed_tracks or seed_genres parameter."
      return: str
      
    - name: initial_pool_size
      doc: "The number of recommended tracks available for this seed."
      return: int
      
    - name: type
      doc: 'The entity type of this seed. One of artist, track or genre.'
      return: str
      

# 32. RecommendationsObject
#
- name: Recommendations
  doc: "RecommendationsObject doc string..."
  repr_return:
    - seeds
    - tracks
  attrs:
    - name: seeds
      doc: "A list of recommendation seed objects."
      return: List[RecommendationSeedObject]
      
    - name: tracks
      doc: "A list of simplified track objects ordered according to the parameters supplied."
      return: List[SimplifiedTrackObject]
      

# 33. ResumePointObject
#
- name: ResumePoint
  doc: "ResumePointObject doc string..."
  repr_return:
    - fully_played
    - resume_position_ms
  attrs:
    - name: fully_played
      doc: "Whether or not the episode has been fully played by the user."
      return: bool
      
    - name: resume_position_ms
      doc: "The user’s most recent position in the episode in milliseconds."
      return: int
        

# 34. SavedAlbumObject
#
- name: SavedAlbum
  doc: "SavedAlbumObject doc string..."
  str_return: album
  repr_return:
    - album
    - added_at
  attrs:
    - name: added_at
      doc: "The date and time the album was saved Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ as datetime objects. "
      return: datetime
      
    - name: album
      doc: "Information about the album."
      return: AlbumObject
      
# 35. SavedEpisodeObject
#
- name: SavedEpisode
  doc: "SavedEpisodeObject doc string..."
  str_return: episode
  repr_return:
    - episode
    - added_at
  attrs:
    - name: added_at
      doc: "The date and time the episode was saved Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ as datetime objects. "
      return: datetime
      
    - name: episode
      doc: "Information about the episode."
      return: EpisodeObject
      
      
      
# 36. SavedShowObject
#
- name: SavedShow
  doc: "SavedShowObject doc string..."
  str_return: show
  repr_return:
    - show
    - added_at
  attrs:
    - name: added_at
      doc: "The date and time the show was saved Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ as datetime objects. "
      return: datetime
      
    - name: show
      doc: "Information about the show."
      return: SimplifiedShowObject
      
# 37. SavedTrackObject
#
- name: SavedTrack
  doc: "SavedTrackObject doc string..."
  str_return: track
  repr_return:
    - track
    - added_at
  attrs:
    - name: added_at
      doc: "The date and time the track was saved Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ as datetime objects. "
      return: datetime
      
    - name: track
      doc: "Information about the track."
      return: TrackObject
      

# 38. ShowObject
# 
- name: Show
  doc: "ShowObject doc string..."
  str_return: name
  repr_return:
    - name
    - id
    - media_type
  attrs:
    - name: available_markets
      doc: "A list of the countries in which the show can be played, identified by their ISO 3166-1 alpha-2 code."
      return: List[str]

    - name: copyrights
      doc: "The copyright statement of the show."
      return: List[CopyrightObject]

    - name: description
      doc: "A description of the show."
      return: str
      
    - name: episodes
      doc: "A list of the show’s episodes."
      return: List[SimplifiedEpisodeObject]

    - name: explicit
      doc: "Whether or not the show has explicit content (True = yes it does; False = no it does not OR unknown)."
      return: bool
      
    - name: external_urls
      doc: 'External URLs for this show.'
      return: ExternalUrlObject
      
    - name: href
      doc: "A link to the Web API endpoint providing full details of the show."
      return: str
      
    - name: id
      doc: 'The Spotify ID for the show.'
      return: str
      
    - name: images
      doc: "The cover art for the show in various sizes, widest first."
      return: List[ImageObject]
      
    - name: is_externally_hosted
      doc: 'True if the show is hosted outside of Spotify’s CDN. This may be None in some cases.'
      return: Optional[bool]
      
    - name: languages
      doc: "A list of the languages used in the show, identified by their ISO 639 code."
      return: List[str]
      
    - name: media_type
      doc: "The media type of the show."
      return: str
      
    - name: name
      doc: "The name of the show."
      return: str

    - name: publisher
      doc: 'The publisher of the show.'
      return: str
      
    - name: type
      doc: 'The object type: “show”.'
      return: str
      
    - name: uri
      doc: 'The Spotify URI for the show.'
      return: str
      
# 39. SimplifiedAlbumObject
# 
- name: SimplifiedAlbum
  doc: "SimplifiedAlbumObject Doc String."
  str_return: name
  repr_return:
    - name
    - artists
    - id
  attrs:
    - name: album_group
      doc: 'The field is present when getting an artist’s albums. Possible values are “album”, “single”, “compilation”, “appears_on”. Compare to album_type this field represents relationship between the artist and the album.'
      return: str
      
    - name: album_type
      doc: "The type of the album: album, single, or compilation."
      return: str
      
    - name: artists
      doc: "The artists of the album. Each artist object includes a link in href to more detailed information about the artist."
      return: List[SimplifiedArtistObject]
      
    - name: available_markets
      doc: "The markets in which the album is available: ISO 3166-1 alpha-2 country codes. Note that an album is considered available in a market when at least 1 of its tracks is available in that market."
      return: List[str]
      
    - name: external_urls
      doc: "Known external URLs for this album."
      return: ExternalUrlObject  
      
    - name: href
      doc: "A link to the Web API endpoint providing full details of the album."
      return: str
      
    - name: id
      doc: "The Spotify ID for the album."
      return: str
      
    - name: images
      doc: "The cover art for the album in various sizes, widest first."
      return: List[ImageObject]
      
    - name: name
      doc: "The name of the album. In case of an album takedown, the value may be an empty string."
      return: str    
      
    - name: release_date
      doc: 'The date the album was first released, for example “1981-12-15”. Depending on the precision, it might be shown as “1981” or “1981-12”.'
      return: str      
      
    - name: release_date_precision
      doc: 'The precision with which release_date value is known: “year”, “month”, or “day”.'
      return: str
      
    - name: restrictions
      doc: "Included in the response when a content restriction is applied. See Restriction Object for more details."
      return: Optional[AlbumRestrictionObject]   
      
    - name: type
      doc: 'The object type: “album”.'
      return: str      
      
    - name: uri
      doc: "The Spotify URI for the album."
      return: str

# 40. SimplifiedArtistObject
# 
- name: SimplifiedArtist
  doc: "Artist docstring"
  str_return: name
  repr_return:
    - name
    - id
  attrs:
    - name: external_urls
      doc: "Known external URLs for this artist."
      return: ExternalUrlObject
      
    - name: href
      doc: "A link to the Web API endpoint providing full details of the artist."
      return: str
      
    - name: id
      doc: "The Spotify ID for the artist."
      return: str
      
    - name: name
      doc: "The name of the artist."
      return: str
      
    - name: type
      doc: 'The object type: "artist".'
      return: str
      
    - name: uri
      doc: "TThe Spotify URI for the artist."
      return: str
      

# 41. SimplifiedEpisodeObject
# 
- name: SimplifiedEpisode
  doc: "SimplifiedEpisodeObject doc string..."
  str_return: name
  repr_return:
    - name
    - show
    - id
  attrs:
    - name: audio_preview_url
      doc: "A URL to a 30 second preview (MP3 format) of the episode. None if not available."
      return: Optional[str]
      
    - name: description
      doc: "A description of the episode."
      return: str
      
    - name: duration_ms
      doc: "The episode length in milliseconds."
      return: int

    - name: explicit
      doc: "Whether or not the episode has explicit content (True = yes it does; False = no it does not OR unknown)."
      return: bool
      
    - name: external_urls
      doc: 'External URLs for this episode.'
      return: ExternalUrlObject
      
    - name: href
      doc: "A link to the Web API endpoint providing full details of the episode."
      return: str
      
    - name: id
      doc: 'The Spotify ID for the episode.'
      return: str
      
    - name: images
      doc: "The cover art for the episode in various sizes, widest first."
      return: List[ImageObject]
      
    - name: is_externally_hosted
      doc: 'True if the episode is hosted outside of Spotify’s CDN.'
      return: bool
      
    - name: is_playable
      doc: "True if the episode is playable in the given market. Otherwise False."
      return: bool
      
    - name: languages
      doc: "A list of the languages used in the episode, identified by their ISO 639 code."
      return: List[str]
      
    - name: name
      doc: "The name of the episode."
      return: str

    - name: release_date
      doc: 'The date the episode was first released, for example "1981-12-15". Depending on the precision, it might be shown as "1981" or "1981-12".'
      return: str
      
    - name: release_date_precision
      doc: 'The precision with which release_date value is known: "year", "month", or "day".'
      return: str
      
    - name: resume_point
      doc: "The user’s most recent position in the episode. Set if the supplied access token is a user token and has the scope user-read-playback-position."
      return: Optional[ResumePointObject]
      
    - name: show
      doc: 'The show on which the episode belongs.'
      return: SimplifiedShowObject
      
    - name: type
      doc: 'The object type: “episode”.'
      return: str
      
    - name: uri
      doc: 'The Spotify URI for the episode.'
      return: str
        
        
# 42. SimplifiedPlaylistObject
#
- name: SimplifiedPlaylist
  doc: "SimplifiedPlayListObject doc string..."
  str_return: name
  repr_return:
    - name
    - id
  attrs:
    - name: collaborative
      doc: "True if the owner allows other users to modify the playlist"
      return: bool
      
    - name: description
      doc: "The playlist description. Only returned for modified, verified playlists, otherwise None."
      return: Optional[str]

    - name: external_urls
      doc: "Known external URLs for this playlist."
      return: ExternalUrlObject

    - name: href
      doc: "A link to the Web API endpoint providing full details of the playlist."
      return: str

    - name: id
      doc: "The Spotify ID for the playlist."
      return: str

    - name: images
      doc: "Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. Note: If returned, the source URL for the image (url) is temporary and will expire in less than a day."
      return: List[ImageObject]
      
    - name: name
      doc: "The name of the playlist."
      return: str

    - name: owner
      doc: "The user who owns the playlist"
      return: PublicUserObject

    - name: public
      doc: "The playlist’s public/private status: True the playlist is public, False the playlist is private, None the playlist status is not relevant."
      return: Optional[bool]
      
    - name: snapshot_id
      doc: "The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version."
      return: str

    - name: tracks
      doc: "Information about the tracks of the playlist. Note, a track object may be None. This can happen if a track is no longer available."
      return: Optional[PlaylistTracksRefObject]
      
    - name: type
      doc: 'The object type: “playlist”.'
      return: str

    - name: uri
      doc: "The Spotify URI for the playlist."
      return: str


# 43. SimplifiedShowObject
# 
- name: SimplifiedShow
  doc: "ShowObject doc string..."
  str_return: name
  repr_return:
    - name
    - id
    - media_type
  attrs:
    - name: available_markets
      doc: "A list of the countries in which the show can be played, identified by their ISO 3166-1 alpha-2 code."
      return: List[str]

    - name: copyrights
      doc: "The copyright statement of the show."
      return: List[CopyrightObject]

    - name: description
      doc: "A description of the show."
      return: str

    - name: explicit
      doc: "Whether or not the show has explicit content (True = yes it does; False = no it does not OR unknown)."
      return: bool
      
    - name: external_urls
      doc: 'External URLs for this show.'
      return: ExternalUrlObject
      
    - name: href
      doc: "A link to the Web API endpoint providing full details of the show."
      return: str
      
    - name: id
      doc: 'The Spotify ID for the show.'
      return: str
      
    - name: images
      doc: "The cover art for the show in various sizes, widest first."
      return: List[ImageObject]
      
    - name: is_externally_hosted
      doc: 'True if the show is hosted outside of Spotify’s CDN. This may be None in some cases.'
      return: Optional[bool]
      
    - name: languages
      doc: "A list of the languages used in the show, identified by their ISO 639 code."
      return: List[str]
      
    - name: media_type
      doc: "The media type of the show."
      return: str
      
    - name: name
      doc: "The name of the show."
      return: str

    - name: publisher
      doc: 'The publisher of the show.'
      return: str
      
    - name: type
      doc: 'The object type: “show”.'
      return: str
      
    - name: uri
      doc: 'The Spotify URI for the show.'
      return: str
      

# 44. SimplifiedTrackObject
# 
- name: SimplifiedTrack
  doc: "SimplifiedTrackObject doc string..."
  str_return: name
  repr_return:
    - name
    - id
    - artists
  attrs:
    - name: artists
      doc: "The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist."
      return: List[SimplifiedArtistObject]
      
    - name: available_markets
      doc: "A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code."
      return: List[str]

    - name: disc_number
      doc: "The disc number (usually 1 unless the album consists of more than one disc)."
      return: int

    - name: duration_ms
      doc: "The track length in milliseconds."
      return: int

    - name: explicit
      doc: "Whether or not the track has explicit lyrics (True = yes it does; False = no it does not OR unknown)."
      return: bool
      
    - name: external_urls
      doc: 'External URLs for this track.'
      return: ExternalUrlObject
      
    - name: href
      doc: "A link to the Web API endpoint providing full details of the track."
      return: str
      
    - name: id
      doc: 'The Spotify ID for the track.'
      return: str
      
    - name: is_local
      doc: "Whether or not the track is from a local file."
      return: bool
      
    - name: is_playable
      doc: 'Part of the response when Track Relinking is applied. If True , the track is playable in the given market. Otherwise False.'
      return: Optional[bool]
      
    - name: linked_from
      doc: "Part of the response when Track Relinking is applied and is only part of the response if the track linking, in fact, exists. The requested track has been replaced with a different track. The track in the linked_from object contains information about the originally requested track."
      return: LinkedTrackObject
      
    - name: name
      doc: "The name of the track."
      return: str

    - name: preview_url
      doc: 'A URL to a 30 second preview (MP3 format) of the track.'
      return: str

    - name: restrictions
      doc: 'Included in the response when a content restriction is applied. See Restriction Object for more details.'
      return: TrackRestrictionObject
      
    - name: track_number
      doc: 'The number of the track. If an album has several discs, the track number is the number on the specified disc.'
      return: int      
      
    - name: type
      doc: 'The object type: “track”.'
      return: str
      
    - name: uri
      doc: 'The Spotify URI for the track.'
      return: str
      

# 45. TrackObject
# 
- name: Track
  doc: "TrackObject doc string..."
  str_return: name
  repr_return:
    - name
    - id
    - artists
  attrs:
    - name: album
      doc: "The album on which the track appears. The album object includes a link in href to full information about the album."
      return: SimplifiedAlbumObject
      
    - name: artists
      doc: "The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist."
      return: List[SimplifiedArtistObject]

    - name: available_markets
      doc: "A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code."
      return: List[str]

    - name: disc_number
      doc: "The disc number (usually 1 unless the album consists of more than one disc)."
      return: int

    - name: duration_ms
      doc: "The track length in milliseconds."
      return: int

    - name: explicit
      doc: "Whether or not the track has explicit lyrics (True = yes it does; False = no it does not OR unknown)."
      return: bool
      
    - name: external_ids
      doc: 'Known external IDs for the track'
      return: ExternalIdObject
      
    - name: external_urls
      doc: 'External URLs for this track.'
      return: ExternalUrlObject
      
    - name: href
      doc: "A link to the Web API endpoint providing full details of the track."
      return: str
      
    - name: id
      doc: 'The Spotify ID for the track.'
      return: str
      
    - name: is_local
      doc: "Whether or not the track is from a local file."
      return: bool
      
    - name: is_playable
      doc: 'Part of the response when Track Relinking is applied. If True , the track is playable in the given market. Otherwise False.'
      return: Optional[bool]
      
    - name: linked_from
      doc: "Part of the response when Track Relinking is applied and is only part of the response if the track linking, in fact, exists. The requested track has been replaced with a different track. The track in the linked_from object contains information about the originally requested track."
      return: LinkedTrackObject
      
    - name: name
      doc: "The name of the track."
      return: str

    - name: popularity
      doc: 'The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.
            \nThe popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.
            \nGenerally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. Note that the popularity value may lag actual popularity by a few days: the value is not updated in real time.'
      return: int
      
    - name: preview_url
      doc: 'A URL to a 30 second preview (MP3 format) of the track.'
      return: str

    - name: restrictions
      doc: 'Included in the response when a content restriction is applied. See Restriction Object for more details.'
      return: TrackRestrictionObject
      
    - name: track_number
      doc: 'The number of the track. If an album has several discs, the track number is the number on the specified disc.'
      return: int      
      
    - name: type
      doc: 'The object type: “track”.'
      return: str
      
    - name: uri
      doc: 'The Spotify URI for the track.'
      return: str
      
# 46. TrackRestrictionObject
# TODO: What does this look like??
- name: TrackRestriction
  doc: "Track Restriction Object docstring..."
  str_return: reason
  repr_return:
    - reason
  attrs:
    - name: reason
      doc: "The reason for the restriction. Supported values:
               \n    market - The content item is not available in the given market.
               \n    product - The content item is not available for the user’s subscription type.
               \n    explicit - The content item is explicit and the user’s account is set to not play explicit content.
            \n\nAdditional reasons may be added in the future."
      return: str
      
# 47. TuneableTrackObject
# 
- name: TuneableTrack
  doc: "TuneableTrackObject docstring.."
  repr_return:
    - acousticness
    - danceability
    - duration_ms
    - energy
    - instrumentalness
    - key
    - liveness
    - loudness
    - mode
    - popularity
    - speechiness
    - tempo
    - time_signature
    - valence
  attrs:
    - name: acousticness
      doc: "A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic."
      return: float
      
    - name: danceability
      doc: "Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable."
      return: float
      
    - name: duration_ms
      doc: "The duration of the track in milliseconds."
      return: int
      
    - name: energy
      doc: "Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy."
      return: float
      
    - name: instrumentalness
      doc: 'Predicts whether a track contains no vocals. “Ooh” and “aah” sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly “vocal”. The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.)'
      return: int    
      
    - name: key
      doc: "The key the track is in. Integers map to pitches using standard Pitch Class notation . E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on."
      return: int

    - name: liveness
      doc: "Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live."
      return: float

    - name: loudness
      doc: "The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typical range between -60 and 0 db."
      return: float
      
    - name: mode
      doc: "Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0."
      return: int
      
    - name: popularity
      doc: "The popularity of the track. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are. Note: When applying track relinking via the market parameter, it is expected to find relinked tracks with popularities that do not match min_*, max_*and target_* popularities. These relinked tracks are accurate replacements for unplayable tracks with the expected popularity scores. Original, non-relinked tracks are available via the linked_from attribute of the relinked track response."
      return: float

    - name: speechiness
      doc: "Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks."
      return: float
      
    - name: tempo
      doc: 'The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.'
      return: float    
      
    - name: time_signature
      doc: "An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure)."
      return: int

    - name: valence
      doc: "A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry)."
      return: float
      
# TODO: Create the custom objects
# ------------------- CUSTOM OBJECTS ------------------ #
# Audio
- name: AudioAnalysis
  doc: "Audio Analysis Object docstring..."
  repr_return:
    - data
  attrs:
    - name: data
      doc: "The data"
      return: dict

# Audio
- name: User
  doc: "User Object docstring..."
  repr_return:
    - data
  attrs:
    - name: data
      doc: "The data"
      return: dict